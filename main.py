import os
import uuid
import hashlib
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
from database import Database

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    'host': os.getenv('DB_HOST'),
    'user': os.getenv('DB_USER'),
    'password': os.getenv('DB_PASSWORD'),
    'database': os.getenv('DB_NAME')
}

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ URL –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
TOKEN = os.getenv('BOT_TOKEN')
MINI_APP_URL = os.getenv('MINI_APP_URL')
REFERRAL_BONUS_REQUESTS = int(os.getenv('REFERRAL_BONUS_REQUESTS', 5))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database(config=DB_CONFIG)


@dp.message(CommandStart())
async def start_handler(message: Message):
    user = message.from_user

    if not db.connect():
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return

    user_data = db.get_user(user.id)
    is_new_user = user_data is None

    referral_code = message.text.split(" ")[1] if len(message.text.split(" ")) > 1 else None
    referral_info = None

    if referral_code:
        referral_info = db.get_referral(referral_code)

        if referral_info and referral_info['user_id'] != user.id:
            if is_new_user or not db.check_referral_used(user.id, referral_info['user_id']):
                db.add_requests(referral_info['user_id'], REFERRAL_BONUS_REQUESTS)
                if not is_new_user:
                    db.save_referral_history(
                        referrer_id=referral_info['user_id'],
                        referred_user_id=user.id,
                        referral_code=referral_code,
                        bonus_requests=REFERRAL_BONUS_REQUESTS
                    )

    db.save_user(
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name,
        is_bot=user.is_bot,
        language_code=user.language_code,
        chat_id=message.chat.id,
        contact=None,
        is_active=True
    )

    user_data = db.get_user(user.id)
    user_ref_code = db.get_user_referral(user_data['user_id']) if user_data else None

    if user_data and not user_ref_code:
        ref_base = f"{user.id}_{uuid.uuid4()}"
        ref_code = hashlib.md5(ref_base.encode()).hexdigest()[:8]
        db.create_referral(user_data['user_id'], ref_code)
        user_ref_code = ref_code

        if referral_code and referral_info:
            db.save_referral_history(
                referrer_id=referral_info['user_id'],
                referred_user_id=user_data['user_id'],
                referral_code=referral_code,
                bonus_requests=REFERRAL_BONUS_REQUESTS
            )

    requests_left = user_data.get('requests_left', 0) if user_data else 0

    if is_new_user:
        welcome_text = (
            f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç!\n"
            f"–£ –≤–∞—Å –µ—Å—Ç—å {requests_left} –∑–∞–ø—Ä–æ—Å–æ–≤.\n"
        )
    else:
        welcome_text = (
            f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}!\n\n"
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ.\n"
            f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {requests_left} –∑–∞–ø—Ä–æ—Å–æ–≤.\n"
        )

    if user_ref_code:
        bot_username = (await bot.get_me()).username
        ref_link = f"https://t.me/{bot_username}?start={user_ref_code}"

        welcome_text += (
            "\nüîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
            f"{ref_link}\n\n"
            f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ {REFERRAL_BONUS_REQUESTS} –±–æ–Ω—É—Å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –∫–∞–∂–¥–æ–≥–æ!"
        )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–º–æ—â—å—é –±–∏–ª–¥–µ—Ä–∞
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ URL –∑–∞–¥–∞–Ω
    if MINI_APP_URL:
        builder.add(InlineKeyboardButton(
            text="üåê –û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            web_app=WebAppInfo(url=MINI_APP_URL)
        ))

    if user_ref_code:
        builder.add(InlineKeyboardButton(
            text="üîó –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É",
            callback_data=f"copy_ref:{user_ref_code}"
        ))
    
    builder.adjust(1)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞
    if builder.buttons:
        await message.answer(welcome_text, reply_markup=builder.as_markup())
    else:
        await message.answer(welcome_text)


@dp.callback_query(F.data.startswith("copy_ref:"))
async def handle_callback(query: CallbackQuery):
    ref_code = query.data.split(":")[1]
    bot_username = (await bot.get_me()).username
    ref_link = f"https://t.me/{bot_username}?start={ref_code}"

    await query.message.answer(
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n{ref_link}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º –∏ –ø–æ–ª—É—á–∏—Ç–µ {REFERRAL_BONUS_REQUESTS} –±–æ–Ω—É—Å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ "
        "–∑–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
    )
    await query.answer()


async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)


if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
