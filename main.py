import hashlib
import logging
import os
import uuid

from aiogram import F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher
from aiogram.filters import CommandStart
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton,
    WebAppInfo, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)
from aiogram.exceptions import TelegramAPIError
from dotenv import load_dotenv


from database_bot import BotDatabase

log_directory = "logs"
if not os.path.exists(log_directory):
    os.makedirs(log_directory)
log_file_path = os.path.join(log_directory, "bot.log")

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename=log_file_path,
    filemode='a'
)
logger = logging.getLogger(__name__)

load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
TOKEN = os.getenv('BOT_TOKEN')
MINI_APP_URL = os.getenv('MINI_APP_URL')
REFERRAL_BONUS_REQUESTS = int(os.getenv('REFERRAL_BONUS_REQUESTS', 3))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
if not TOKEN:
    logger.critical("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
try:
    db = BotDatabase(
        host=os.getenv('DB_HOST'),
        user=os.getenv('DB_USER'),
        password=os.getenv('DB_PASSWORD'),
        database=os.getenv('DB_NAME')
    )
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    if not db.conn or not db.conn.open:
        if not db.connect():
            logger.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.")
            exit("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î.")
except Exception as e:
    logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    exit("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î.")


class UserState(StatesGroup):
    waiting_for_contact = State()


@dp.message(CommandStart())
async def start_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    referrer_info = None # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º
    referral_code_used = None # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ä–µ—Ñ. –∫–æ–¥

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} ({user.username})")

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –î–û –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    try:
        user_data_before_save = db.get_user(user.id)
        user_exists = user_data_before_save is not None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} {'—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' if user_exists else '–Ω–æ–≤—ã–π'}")

    # 2. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–û–í–´–ô, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
    if not user_exists:
        args = message.text.split()
        if len(args) > 1:
            potential_referral_code = args[1]
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø—Ä–∏—à–µ–ª —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ—Ñ.–∫–æ–¥): {potential_referral_code}")
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –ø–æ –∫–æ–¥—É
                referrer_info = db.get_referral(potential_referral_code)

                if referrer_info:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–∞–º —Å–µ–±—è –ø—Ä–∏–≥–ª–∞—Å–∏–ª
                    if referrer_info['referrer_telegram_id'] == user.id:
                        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥.")
                        referrer_info = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, self-—Ä–µ—Ñ–µ—Ä–∞–ª –Ω–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º
                    else:
                        logger.info(f"–ù–∞–π–¥–µ–Ω —Ä–µ—Ñ–µ—Ä–µ—Ä {referrer_info['referrer_telegram_id']} –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –ø–æ –∫–æ–¥—É {potential_referral_code}")
                        referral_code_used = potential_referral_code
                else:
                    logger.info(f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ '{potential_referral_code}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ '{potential_referral_code}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–∞, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É

    # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–µ–ø–µ—Ä—å —Ç–æ—á–Ω–æ –∑–Ω–∞–µ–º, –Ω–æ–≤—ã–π –æ–Ω –∏–ª–∏ –Ω–µ—Ç)
    try:
        save_success = db.save_user(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name,
            chat_id=message.chat.id, # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            is_bot=user.is_bot,
            language_code=user.language_code
        )
        if not save_success:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ü–û–°–õ–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        user_data = db.get_user(user.id)
        if not user_data:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
        return

    # 4. –ï—Å–ª–∏ –±—ã–ª –£–°–ü–ï–®–ù–´–ô —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ (–Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å + –≤–∞–ª–∏–¥–Ω—ã–π –∫–æ–¥ –¥—Ä—É–≥–æ–≥–æ —é–∑–µ—Ä–∞)
    if referrer_info and referral_code_used and not user_exists:
        referrer_telegram_id = referrer_info['referrer_telegram_id']
        referrer_user_id = referrer_info['referrer_user_id'] # ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ users
        referral_code_id = referrer_info['referral_code_id'] # ID –∫–æ–¥–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ referral_codes
        new_user_db_id = user_data['user_id'] # ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users

        try:
            # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å—ã —Ä–µ—Ñ–µ—Ä–µ—Ä—É
            if db.add_requests(referrer_telegram_id, REFERRAL_BONUS_REQUESTS):
                logger.info(f"–ù–∞—á–∏—Å–ª–µ–Ω–æ {REFERRAL_BONUS_REQUESTS} –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–µ—Ñ–µ—Ä–µ—Ä—É {referrer_telegram_id}")

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                record_success = db.record_referral(
                    referrer_id=referrer_user_id,
                    referred_id=new_user_db_id,
                    referral_code_id=referral_code_id,
                    referral_code=referral_code_used,
                    bonus_requests_added=REFERRAL_BONUS_REQUESTS
                )
                if not record_success:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –∏—Å—Ç–æ—Ä–∏—é: {referrer_user_id} -> {new_user_db_id}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
                referrer_chat_id = db.get_user_chat_id(referrer_telegram_id)
                if referrer_chat_id:
                    try:
                        await bot.send_message(
                            referrer_chat_id,
                            f"üéâ –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "
                            f"{user.first_name or user.username or f'ID:{user.id}'}!\n"
                            f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ +{REFERRAL_BONUS_REQUESTS} –±–æ–Ω—É—Å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."
                        )
                        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–µ—Ä—É {referrer_telegram_id}")
                    except TelegramAPIError as e:
                        # –ß–∞—Å—Ç–∞—è –æ—à–∏–±–∫–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
                        if "bot was blocked by the user" in str(e):
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É {referrer_telegram_id}: –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
                        else:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É {referrer_telegram_id} (chat_id: {referrer_chat_id}): {e}")
                else:
                    logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω chat_id –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {referrer_telegram_id}, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∏—Å–ª–∏—Ç—å –±–æ–Ω—É—Å—ã —Ä–µ—Ñ–µ—Ä–µ—Ä—É {referrer_telegram_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è/—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {referrer_telegram_id}: {e}")


    # 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–æ–≤–æ–≥–æ –∏–ª–∏ —Å—Ç–∞—Ä–æ–≥–æ), –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    user_ref_code = None
    try:
        user_ref_code = db.get_user_referral_code(user.id)
        if not user_ref_code:
            logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π.")
            ref_base = f"{user.id}_{uuid.uuid4()}"
            ref_code_new = hashlib.md5(ref_base.encode()).hexdigest()[:8] # –î–ª–∏–Ω–∞ –∫–æ–¥–∞ 8 —Å–∏–º–≤–æ–ª–æ–≤
            if db.create_referral(user.id, ref_code_new):
                user_ref_code = ref_code_new
                logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ '{user_ref_code}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        else:
            logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} —É–∂–µ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {user_ref_code}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏/–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è {user.id}: {e}")

    ref_link = ""
    if user_ref_code:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
            bot_info = await bot.get_me()
            ref_link = f"https://t.me/{bot_info.username}?start={user_ref_code}"
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –±–æ—Ç–∞ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {e}")
            # –§–æ–ª–ª–±—ç–∫ –Ω–∞ —Å—Ç–∞—Ç–∏—á–Ω–æ–µ –∏–º—è, –µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ, –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            # ref_link = f"https://t.me/YOUR_BOT_USERNAME?start={user_ref_code}"

    # 6. –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_data, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ü–û–°–õ–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    has_contact = 'contact' in user_data and user_data['contact'] is not None and user_data['contact'] != ''
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} {'–∏–º–µ–µ—Ç' if has_contact else '–Ω–µ –∏–º–µ–µ—Ç'} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç.")

    # 7. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
    user_display_name = user_data.get('first_name') or user.username or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id}"
    requests_left = user_data.get('requests_left', 0)

    if has_contact:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –ø–æ–¥–µ–ª–∏–ª—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
        balance_text = (
            f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_display_name}!\n\n"
            f"üéâ –í–∞—à –±–∞–ª–∞–Ω—Å: {requests_left} –∑–∞–ø—Ä–æ—Å–æ–≤.\n\n"
        )
        if ref_link:
            balance_text += (
                f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ +{REFERRAL_BONUS_REQUESTS} –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –∫–∞–∂–¥–æ–≥–æ!\n"
                f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:\n`{ref_link}`" # Markdown –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            )
        else:
            balance_text += "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        inline_keyboard = []
        if MINI_APP_URL:
            inline_keyboard.append([
                InlineKeyboardButton(
                    text="üåê –û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                    web_app=WebAppInfo(url=MINI_APP_URL)
                )
            ])

        inline_markup = InlineKeyboardMarkup(inline_keyboard=inline_keyboard) if inline_keyboard else None
        try:
            await message.answer(balance_text, reply_markup=inline_markup, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è '–±–∞–ª–∞–Ω—Å' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")

    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ò–õ–ò —Å—Ç–∞—Ä—ã–π, –Ω–æ –±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        welcome_text = (
            f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_display_name}!\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç!\n"
            f"–°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {requests_left} –∑–∞–ø—Ä–æ—Å–æ–≤.\n"
        )
        if ref_link:
            welcome_text += (
                f"\n–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ +{REFERRAL_BONUS_REQUESTS} –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –∫–∞–∂–¥–æ–≥–æ!\n"
                f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n`{ref_link}`\n" # Markdown –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            )

        welcome_text += (
            "\n\nüì± –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá\n\n"
            "üîí –í–∞—à –Ω–æ–º–µ—Ä –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –Ω–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º."
        )

        inline_keyboard = []
        if MINI_APP_URL:
            inline_keyboard.append([
                InlineKeyboardButton(
                    text="üåê –û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                    web_app=WebAppInfo(url=MINI_APP_URL)
                )
            ])
        inline_markup = InlineKeyboardMarkup(inline_keyboard=inline_keyboard) if inline_keyboard else None

        contact_keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]],
            resize_keyboard=True,
            one_time_keyboard=True # –ö–Ω–æ–ø–∫–∞ –∏—Å—á–µ–∑–Ω–µ—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
        )

        try:
            # –°–Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç –∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            await message.answer(welcome_text, reply_markup=inline_markup, parse_mode="Markdown")
            # –ó–∞—Ç–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å —Ä–µ–ø–ª–∞–π-–∫–Ω–æ–ø–∫–æ–π
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:", reply_markup=contact_keyboard)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
            await state.set_state(UserState.waiting_for_contact)
            logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'waiting_for_contact' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è / –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–ª–±—ç–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω,
# —Ç–∞–∫ –∫–∞–∫ —Å—Å—ã–ª–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ –∏ –ª–µ–≥–∫–æ –∫–æ–ø–∏—Ä—É–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é Markdown.

@dp.message(F.content_type == types.ContentType.CONTACT, UserState.waiting_for_contact)
async def process_contact(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    user = message.from_user
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.contact is not None and message.contact.user_id == user.id:
        contact_phone = message.contact.phone_number
        logger.info(f"–ö–æ–Ω—Ç–∞–∫—Ç {contact_phone} –ø–æ–ª—É—á–µ–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} (ID —Å–æ–≤–ø–∞–¥–∞–µ—Ç)")
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if db.save_contact(user.id, contact_phone):
                logger.info(f"–ö–æ–Ω—Ç–∞–∫—Ç {contact_phone} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_data = db.get_user(user.id)
                requests_left = user_data.get('requests_left', 0) if user_data else 0
                ref_code = db.get_user_referral_code(user.id)

                ref_link = ""
                if ref_code:
                    try:
                        bot_info = await bot.get_me()
                        ref_link = f"https://t.me/{bot_info.username}?start={ref_code}"
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –±–æ—Ç–∞ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –≤ process_contact: {e}")

                complete_text = (
                    f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç ({contact_phone}) —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\n"
                    f"üéâ –£ –≤–∞—Å {requests_left} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.\n\n"
                )
                if ref_link:
                    complete_text += f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n`{ref_link}`" # Markdown

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
                await message.answer(complete_text, reply_markup=ReplyKeyboardRemove(), parse_mode="Markdown")

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.clear()
                logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞.")

            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ {contact_phone} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –≤ –ë–î.")
                await message.answer(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    reply_markup=ReplyKeyboardRemove() # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ë–î
                )
                await state.clear() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ—Ç {user.id}: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=ReplyKeyboardRemove())
            await state.clear()

    else:
        # –°–∏—Ç—É–∞—Ü–∏—è, –∫–æ–≥–¥–∞ –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ —á—É–∂–æ–π –∫–æ–Ω—Ç–∞–∫—Ç
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø—Ä–∏—Å–ª–∞–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –Ω–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.")
        contact_keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º' –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–º–µ–Ω–Ω–æ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
            reply_markup=contact_keyboard # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑
        )
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º, –∂–¥–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç


@dp.message(UserState.waiting_for_contact)
async def process_invalid_input_while_waiting_contact(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤) –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—Ä–∏—Å–ª–∞–ª –Ω–µ –∫–æ–Ω—Ç–∞–∫—Ç '{message.text}' –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_for_contact.")
    contact_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer(
        "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
        reply_markup=contact_keyboard
    )


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –æ–ø—Ä–æ—Å–∞
    if not db.conn or not db.conn.open:
        logger.warning("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        if not db.connect():
            logger.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω.")
            return # –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç –±–µ–∑ –ë–î

    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (polling)...")
    # –ó–∞–ø—É—Å–∫ long polling
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {e}", exc_info=True)
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞ –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
        await bot.session.close()
        db.close()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Ä–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã.")


if __name__ == '__main__':
    import asyncio
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª KeyboardInterrupt. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as main_error:
        logger.critical(f"–ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ main —Ü–∏–∫–ª–µ: {main_error}", exc_info=True)